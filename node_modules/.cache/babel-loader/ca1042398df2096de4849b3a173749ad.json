{"ast":null,"code":"import _slicedToArray from\"F:\\\\Project\\\\walkspanDeploy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";var getImg=function getImg(checkedView,imageUrl){// sppedometer\nif(checkedView[0].isChecked){return/*#__PURE__*/React.createElement(\"img\",{alt:\"speedometer\",src:imageUrl,style:{height:\"15%\",width:\"15%\"}});}// with icon\nelse if(checkedView[2].isChecked){return/*#__PURE__*/React.createElement(\"img\",{alt:\"with_icon\",src:imageUrl,style:{height:\"15%\",width:\"15%\"}});}// pure score\nelse{return/*#__PURE__*/React.createElement(\"img\",{alt:\"pure_score\",src:imageUrl,style:{height:\"8%\",width:\"8%\"}});}};var FeatureImageAndScoreAndDescription=function FeatureImageAndScoreAndDescription(props){var featureName=props.featureName,featureScore=props.featureScore,checkedView=props.checkedView;var _useState=useState(),_useState2=_slicedToArray(_useState,2),imageUrl=_useState2[0],setImageUrl=_useState2[1];var name=featureName.toLowerCase();var score;if(featureName===\"Total\"){score=Math.round(featureScore/100*3);}else{score=Math.round(featureScore);}useEffect(function(){if(checkedView[0].isChecked){score&&setImageUrl(require(\"../../../../img/widgets/meter-\".concat(score,\".png\")));}else if(checkedView[2].isChecked){score&&setImageUrl(require(\"../../../../img/widgets/\".concat(name,\"-score-\").concat(score,\".png\")));}else{score&&setImageUrl(require(\"../../../../img/widgets/\".concat(score,\".png\")));}},[imageUrl,checkedView]);return getImg(checkedView,imageUrl);};export default FeatureImageAndScoreAndDescription;","map":{"version":3,"sources":["F:/Project/walkspanDeploy/src/pages/widgets/WidgetBox/IndividualScore/FeatureImageAndScoreAndDescription.js"],"names":["React","useEffect","useState","getImg","checkedView","imageUrl","isChecked","height","width","FeatureImageAndScoreAndDescription","props","featureName","featureScore","setImageUrl","name","toLowerCase","score","Math","round","require"],"mappings":"uJAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,WAAD,CAAcC,QAAd,CAA2B,CACxC;AACA,GAAID,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,CAA8B,CAC5B,mBACE,2BACE,GAAG,CAAC,aADN,CAEE,GAAG,CAAED,QAFP,CAGE,KAAK,CAAE,CACLE,MAAM,CAAE,KADH,CAELC,KAAK,CAAE,KAFF,CAHT,EADF,CAUD,CACD;AAZA,IAaK,IAAIJ,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,CAA8B,CACjC,mBACE,2BACE,GAAG,CAAC,WADN,CAEE,GAAG,CAAED,QAFP,CAGE,KAAK,CAAE,CACLE,MAAM,CAAE,KADH,CAELC,KAAK,CAAE,KAFF,CAHT,EADF,CAUD,CACD;AAZK,IAaA,CACH,mBACE,2BACE,GAAG,CAAC,YADN,CAEE,GAAG,CAAEH,QAFP,CAGE,KAAK,CAAE,CACLE,MAAM,CAAE,IADH,CAELC,KAAK,CAAE,IAFF,CAHT,EADF,CAUD,CACF,CAxCD,CAyCA,GAAMC,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAACC,KAAD,CAAW,IAC5CC,CAAAA,WAD4C,CACDD,KADC,CAC5CC,WAD4C,CAC/BC,YAD+B,CACDF,KADC,CAC/BE,YAD+B,CACjBR,WADiB,CACDM,KADC,CACjBN,WADiB,eAEpBF,QAAQ,EAFY,wCAE7CG,QAF6C,eAEnCQ,WAFmC,eAGpD,GAAIC,CAAAA,IAAI,CAAGH,WAAW,CAACI,WAAZ,EAAX,CACA,GAAIC,CAAAA,KAAJ,CACA,GAAIL,WAAW,GAAK,OAApB,CAA6B,CAC3BK,KAAK,CAAGC,IAAI,CAACC,KAAL,CAAYN,YAAY,CAAG,GAAhB,CAAuB,CAAlC,CAAR,CACD,CAFD,IAEO,CACLI,KAAK,CAAGC,IAAI,CAACC,KAAL,CAAWN,YAAX,CAAR,CACD,CAEDX,SAAS,CAAC,UAAM,CACd,GAAIG,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,CAA8B,CAC5BU,KAAK,EACHH,WAAW,CAACM,OAAO,yCAAkCH,KAAlC,SAAR,CADb,CAED,CAHD,IAGO,IAAIZ,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,CAA8B,CACnCU,KAAK,EACHH,WAAW,CACTM,OAAO,mCAA4BL,IAA5B,mBAA0CE,KAA1C,SADE,CADb,CAID,CALM,IAKA,CACLA,KAAK,EAAIH,WAAW,CAACM,OAAO,mCAA4BH,KAA5B,SAAR,CAApB,CACD,CACF,CAZQ,CAYN,CAACX,QAAD,CAAWD,WAAX,CAZM,CAAT,CAcA,MAAOD,CAAAA,MAAM,CAACC,WAAD,CAAcC,QAAd,CAAb,CACD,CA1BD,CA4BA,cAAeI,CAAAA,kCAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nconst getImg = (checkedView, imageUrl) => {\r\n  // sppedometer\r\n  if (checkedView[0].isChecked) {\r\n    return (\r\n      <img\r\n        alt=\"speedometer\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"15%\",\r\n          width: \"15%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // with icon\r\n  else if (checkedView[2].isChecked) {\r\n    return (\r\n      <img\r\n        alt=\"with_icon\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"15%\",\r\n          width: \"15%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // pure score\r\n  else {\r\n    return (\r\n      <img\r\n        alt=\"pure_score\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"8%\",\r\n          width: \"8%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\nconst FeatureImageAndScoreAndDescription = (props) => {\r\n  const { featureName, featureScore, checkedView } = props;\r\n  const [imageUrl, setImageUrl] = useState();\r\n  var name = featureName.toLowerCase();\r\n  let score;\r\n  if (featureName === \"Total\") {\r\n    score = Math.round((featureScore / 100) * 3);\r\n  } else {\r\n    score = Math.round(featureScore);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (checkedView[0].isChecked) {\r\n      score &&\r\n        setImageUrl(require(`../../../../img/widgets/meter-${score}.png`));\r\n    } else if (checkedView[2].isChecked) {\r\n      score &&\r\n        setImageUrl(\r\n          require(`../../../../img/widgets/${name}-score-${score}.png`)\r\n        );\r\n    } else {\r\n      score && setImageUrl(require(`../../../../img/widgets/${score}.png`));\r\n    }\r\n  }, [imageUrl, checkedView]);\r\n\r\n  return getImg(checkedView, imageUrl);\r\n};\r\n\r\nexport default FeatureImageAndScoreAndDescription;\r\n"]},"metadata":{},"sourceType":"module"}