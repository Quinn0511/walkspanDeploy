{"ast":null,"code":"import _regeneratorRuntime from\"F:\\\\Project\\\\walkspanDeploy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _slicedToArray from\"F:\\\\Project\\\\walkspanDeploy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"F:\\\\Project\\\\walkspanDeploy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import React,{useState,useEffect,useRef,useContext}from\"react\";import'../pages/api/apiStyles.css';import{MyContext}from'./context-manager';var autoComplete;var loadScript=function loadScript(url,callback){var script=document.createElement(\"script\");script.type=\"text/javascript\";if(script.readyState){script.onreadystatechange=function(){if(script.readyState===\"loaded\"||script.readyState===\"complete\"){script.onreadystatechange=null;callback();}};}else{script.onload=function(){return callback();};}script.src=url;document.getElementsByTagName(\"head\")[0].appendChild(script);};function handleScriptLoad(updateQuery,autoCompleteRef){autoComplete=new window.google.maps.places.Autocomplete(autoCompleteRef.current);autoComplete.setFields([\"address_components\",\"formatted_address\"]);autoComplete.addListener(\"place_changed\",function(){return handlePlaceSelect(updateQuery);});}function handlePlaceSelect(_x){return _handlePlaceSelect.apply(this,arguments);}function _handlePlaceSelect(){_handlePlaceSelect=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(updateQuery){var addressObject,query;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:addressObject=autoComplete.getPlace();query=addressObject.formatted_address;updateQuery(query);console.log(addressObject);case 4:case\"end\":return _context.stop();}}},_callee);}));return _handlePlaceSelect.apply(this,arguments);}function GoogleAddressComplete(){var _useContext=useContext(MyContext),setAddress=_useContext.setAddress;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),query=_useState2[0],setQuery=_useState2[1];var autoCompleteRef=useRef(null);useEffect(function(){loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBOXYeVd2IW4rON6FTyLBesJOG87NE3BJo&libraries=places\",function(){return handleScriptLoad(setQuery,autoCompleteRef);});},[]);useEffect(function(){setAddress(query);},[query]);return/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"input\",{ref:autoCompleteRef,onChange:function onChange(event){setQuery(event.target.value);}// placeholder=\"573 Hudson St, New York, NY 10014, USA\"\n,placeholder:\"Input a address\",value:query,className:\"api-address-search\",id:\"address-selector\"}));}export default GoogleAddressComplete;","map":{"version":3,"sources":["F:/Project/walkspanDeploy/src/temporary/GoogleAddressComplete.js"],"names":["React","useState","useEffect","useRef","useContext","MyContext","autoComplete","loadScript","url","callback","script","document","createElement","type","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","handleScriptLoad","updateQuery","autoCompleteRef","window","google","maps","places","Autocomplete","current","setFields","addListener","handlePlaceSelect","addressObject","getPlace","query","formatted_address","console","log","GoogleAddressComplete","setAddress","setQuery","event","target","value"],"mappings":"kcAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,CAA6CC,UAA7C,KAA+D,OAA/D,CACA,MAAO,4BAAP,CACA,OAASC,SAAT,KAA0B,mBAA1B,CAEA,GAAIC,CAAAA,YAAJ,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAMC,QAAN,CAAmB,CAClC,GAAIC,CAAAA,MAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb,CACAF,MAAM,CAACG,IAAP,CAAc,iBAAd,CAEA,GAAIH,MAAM,CAACI,UAAX,CAAuB,CACnBJ,MAAM,CAACK,kBAAP,CAA4B,UAAW,CACnC,GAAIL,MAAM,CAACI,UAAP,GAAsB,QAAtB,EAAkCJ,MAAM,CAACI,UAAP,GAAsB,UAA5D,CAAwE,CACpEJ,MAAM,CAACK,kBAAP,CAA4B,IAA5B,CACAN,QAAQ,GACX,CACJ,CALD,CAMH,CAPD,IAOO,CACHC,MAAM,CAACM,MAAP,CAAgB,iBAAMP,CAAAA,QAAQ,EAAd,EAAhB,CACH,CAEDC,MAAM,CAACO,GAAP,CAAaT,GAAb,CACAG,QAAQ,CAACO,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDT,MAArD,EACH,CAjBD,CAmBA,QAASU,CAAAA,gBAAT,CAA0BC,WAA1B,CAAuCC,eAAvC,CAAwD,CACpDhB,YAAY,CAAG,GAAIiB,CAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,YAA9B,CACXL,eAAe,CAACM,OADL,CAAf,CAGAtB,YAAY,CAACuB,SAAb,CAAuB,CAAC,oBAAD,CAAuB,mBAAvB,CAAvB,EACAvB,YAAY,CAACwB,WAAb,CAAyB,eAAzB,CAA0C,iBACtCC,CAAAA,iBAAiB,CAACV,WAAD,CADqB,EAA1C,EAGH,C,QAEcU,CAAAA,iB,+JAAf,iBAAiCV,WAAjC,0IACUW,aADV,CAC0B1B,YAAY,CAAC2B,QAAb,EAD1B,CAEUC,KAFV,CAEkBF,aAAa,CAACG,iBAFhC,CAGId,WAAW,CAACa,KAAD,CAAX,CACAE,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAJJ,sD,oDAOA,QAASM,CAAAA,qBAAT,EAAiC,iBACRlC,UAAU,CAACC,SAAD,CADF,CACtBkC,UADsB,aACtBA,UADsB,eAEHtC,QAAQ,CAAC,EAAD,CAFL,wCAEtBiC,KAFsB,eAEfM,QAFe,eAG7B,GAAMlB,CAAAA,eAAe,CAAGnB,MAAM,CAAC,IAAD,CAA9B,CAGAD,SAAS,CAAC,UAAM,CACZK,UAAU,wGAEN,iBAAMa,CAAAA,gBAAgB,CAACoB,QAAD,CAAWlB,eAAX,CAAtB,EAFM,CAAV,CAIH,CALQ,CAKN,EALM,CAAT,CAOApB,SAAS,CAAC,UAAI,CACVqC,UAAU,CAACL,KAAD,CAAV,CACH,CAFQ,CAEN,CAACA,KAAD,CAFM,CAAT,CAIA,mBAEI,2BAAK,SAAS,CAAC,YAAf,eACI,6BACI,GAAG,CAAEZ,eADT,CAEI,QAAQ,CAAE,kBAAAmB,KAAK,CAAI,CACfD,QAAQ,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR,CACH,CACD;AALJ,CAMI,WAAW,CAAC,iBANhB,CAOI,KAAK,CAAET,KAPX,CAQI,SAAS,CAAC,oBARd,CASI,EAAE,CAAC,kBATP,EADJ,CAFJ,CAgBH,CAED,cAAeI,CAAAA,qBAAf","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport '../pages/api/apiStyles.css';\r\nimport { MyContext } from './context-manager';\r\n\r\nlet autoComplete;\r\n\r\nconst loadScript = (url, callback) => {\r\n    let script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n\r\n    if (script.readyState) {\r\n        script.onreadystatechange = function() {\r\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\r\n                script.onreadystatechange = null;\r\n                callback();\r\n            }\r\n        };\r\n    } else {\r\n        script.onload = () => callback();\r\n    }\r\n\r\n    script.src = url;\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n};\r\n\r\nfunction handleScriptLoad(updateQuery, autoCompleteRef) {\r\n    autoComplete = new window.google.maps.places.Autocomplete(\r\n        autoCompleteRef.current\r\n    );\r\n    autoComplete.setFields([\"address_components\", \"formatted_address\"]);\r\n    autoComplete.addListener(\"place_changed\", () =>\r\n        handlePlaceSelect(updateQuery)\r\n    );\r\n}\r\n\r\nasync function handlePlaceSelect(updateQuery) {\r\n    const addressObject = autoComplete.getPlace();\r\n    const query = addressObject.formatted_address;\r\n    updateQuery(query);\r\n    console.log(addressObject);\r\n}\r\n\r\nfunction GoogleAddressComplete() {\r\n    const {setAddress} = useContext(MyContext);\r\n    const [query, setQuery] = useState(\"\");\r\n    const autoCompleteRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        loadScript(\r\n            `https://maps.googleapis.com/maps/api/js?key=AIzaSyBOXYeVd2IW4rON6FTyLBesJOG87NE3BJo&libraries=places`,\r\n            () => handleScriptLoad(setQuery, autoCompleteRef)\r\n        );\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        setAddress(query)\r\n    }, [query])\r\n\r\n    return (\r\n\r\n        <div className=\"form-group\">\r\n            <input\r\n                ref={autoCompleteRef}\r\n                onChange={event => {\r\n                    setQuery(event.target.value);\r\n                }}\r\n                // placeholder=\"573 Hudson St, New York, NY 10014, USA\"\r\n                placeholder=\"Input a address\"\r\n                value={query}\r\n                className=\"api-address-search\"\r\n                id=\"address-selector\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GoogleAddressComplete;"]},"metadata":{},"sourceType":"module"}