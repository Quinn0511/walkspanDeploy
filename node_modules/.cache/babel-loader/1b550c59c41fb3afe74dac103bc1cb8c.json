{"ast":null,"code":"var _jsxFileName = \"F:\\\\Project\\\\walkspanDeploy\\\\src\\\\pages\\\\widgets\\\\WidgetBox\\\\IndividualScore\\\\FeatureImageAndScoreAndDescription.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst getImg = (checkedView, imageUrl) => {\n  // sppedometer\n  if (checkedView[0].isChecked) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"speedometer\",\n      src: imageUrl,\n      style: {\n        height: \"15%\",\n        width: \"15%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 7\n      }\n    });\n  } // with icon\n  else if (checkedView[2].isChecked) {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"with_icon\",\n        src: imageUrl,\n        style: {\n          height: \"15%\",\n          width: \"15%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }\n      });\n    } // pure score\n    else {\n        return /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"pure_score\",\n          src: imageUrl,\n          style: {\n            height: \"8%\",\n            width: \"8%\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 7\n          }\n        });\n      }\n};\n\nconst FeatureImageAndScoreAndDescription = props => {\n  const {\n    featureName,\n    featureScore,\n    checkedView\n  } = props;\n  const [imageUrl, setImageUrl] = useState();\n  var name = featureName.toLowerCase();\n  let score;\n\n  if (featureName === \"Total\") {\n    score = Math.round(featureScore / 100 * 3);\n  } else {\n    score = Math.round(featureScore);\n  }\n\n  useEffect(() => {\n    if (checkedView[0].isChecked) {\n      score && setImageUrl(require(`../../../../img/widgets/meter-${score}.png`));\n    } else if (checkedView[2].isChecked) {\n      score && setImageUrl(require(`../../../../img/widgets/${name}-score-${score}.png`));\n    } else {\n      score && setImageUrl(require(`../../../../img/widgets/${score}.png`));\n    }\n  }, [imageUrl, checkedView]);\n  return getImg(checkedView, imageUrl);\n};\n\nexport default FeatureImageAndScoreAndDescription;","map":{"version":3,"sources":["F:/Project/walkspanDeploy/src/pages/widgets/WidgetBox/IndividualScore/FeatureImageAndScoreAndDescription.js"],"names":["React","useEffect","useState","getImg","checkedView","imageUrl","isChecked","height","width","FeatureImageAndScoreAndDescription","props","featureName","featureScore","setImageUrl","name","toLowerCase","score","Math","round","require"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AACA,MAAMC,MAAM,GAAG,CAACC,WAAD,EAAcC,QAAd,KAA2B;AACxC;AACA,MAAID,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,EAA8B;AAC5B,wBACE;AACE,MAAA,GAAG,EAAC,aADN;AAEE,MAAA,GAAG,EAAED,QAFP;AAGE,MAAA,KAAK,EAAE;AACLE,QAAAA,MAAM,EAAE,KADH;AAELC,QAAAA,KAAK,EAAE;AAFF,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXD,CAYA;AAZA,OAaK,IAAIJ,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,EAA8B;AACjC,0BACE;AACE,QAAA,GAAG,EAAC,WADN;AAEE,QAAA,GAAG,EAAED,QAFP;AAGE,QAAA,KAAK,EAAE;AACLE,UAAAA,MAAM,EAAE,KADH;AAELC,UAAAA,KAAK,EAAE;AAFF,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD,KAXI,CAYL;AAZK,SAaA;AACH,4BACE;AACE,UAAA,GAAG,EAAC,YADN;AAEE,UAAA,GAAG,EAAEH,QAFP;AAGE,UAAA,KAAK,EAAE;AACLE,YAAAA,MAAM,EAAE,IADH;AAELC,YAAAA,KAAK,EAAE;AAFF,WAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;AACF,CAxCD;;AAyCA,MAAMC,kCAAkC,GAAIC,KAAD,IAAW;AACpD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BR,IAAAA;AAA7B,MAA6CM,KAAnD;AACA,QAAM,CAACL,QAAD,EAAWQ,WAAX,IAA0BX,QAAQ,EAAxC;AACA,MAAIY,IAAI,GAAGH,WAAW,CAACI,WAAZ,EAAX;AACA,MAAIC,KAAJ;;AACA,MAAIL,WAAW,KAAK,OAApB,EAA6B;AAC3BK,IAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYN,YAAY,GAAG,GAAhB,GAAuB,CAAlC,CAAR;AACD,GAFD,MAEO;AACLI,IAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,YAAX,CAAR;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,EAA8B;AAC5BU,MAAAA,KAAK,IACHH,WAAW,CAACM,OAAO,CAAE,iCAAgCH,KAAM,MAAxC,CAAR,CADb;AAED,KAHD,MAGO,IAAIZ,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAnB,EAA8B;AACnCU,MAAAA,KAAK,IACHH,WAAW,CACTM,OAAO,CAAE,2BAA0BL,IAAK,UAASE,KAAM,MAAhD,CADE,CADb;AAID,KALM,MAKA;AACLA,MAAAA,KAAK,IAAIH,WAAW,CAACM,OAAO,CAAE,2BAA0BH,KAAM,MAAlC,CAAR,CAApB;AACD;AACF,GAZQ,EAYN,CAACX,QAAD,EAAWD,WAAX,CAZM,CAAT;AAcA,SAAOD,MAAM,CAACC,WAAD,EAAcC,QAAd,CAAb;AACD,CA1BD;;AA4BA,eAAeI,kCAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nconst getImg = (checkedView, imageUrl) => {\r\n  // sppedometer\r\n  if (checkedView[0].isChecked) {\r\n    return (\r\n      <img\r\n        alt=\"speedometer\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"15%\",\r\n          width: \"15%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // with icon\r\n  else if (checkedView[2].isChecked) {\r\n    return (\r\n      <img\r\n        alt=\"with_icon\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"15%\",\r\n          width: \"15%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // pure score\r\n  else {\r\n    return (\r\n      <img\r\n        alt=\"pure_score\"\r\n        src={imageUrl}\r\n        style={{\r\n          height: \"8%\",\r\n          width: \"8%\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\nconst FeatureImageAndScoreAndDescription = (props) => {\r\n  const { featureName, featureScore, checkedView } = props;\r\n  const [imageUrl, setImageUrl] = useState();\r\n  var name = featureName.toLowerCase();\r\n  let score;\r\n  if (featureName === \"Total\") {\r\n    score = Math.round((featureScore / 100) * 3);\r\n  } else {\r\n    score = Math.round(featureScore);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (checkedView[0].isChecked) {\r\n      score &&\r\n        setImageUrl(require(`../../../../img/widgets/meter-${score}.png`));\r\n    } else if (checkedView[2].isChecked) {\r\n      score &&\r\n        setImageUrl(\r\n          require(`../../../../img/widgets/${name}-score-${score}.png`)\r\n        );\r\n    } else {\r\n      score && setImageUrl(require(`../../../../img/widgets/${score}.png`));\r\n    }\r\n  }, [imageUrl, checkedView]);\r\n\r\n  return getImg(checkedView, imageUrl);\r\n};\r\n\r\nexport default FeatureImageAndScoreAndDescription;\r\n"]},"metadata":{},"sourceType":"module"}