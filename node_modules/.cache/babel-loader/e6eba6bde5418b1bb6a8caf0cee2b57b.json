{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/avatar/style\";\nimport _Avatar from \"antd/es/avatar\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nvar _jsxFileName = \"F:\\\\Project\\\\walkspanDeploy\\\\src\\\\pages\\\\widgets\\\\WidgetBox\\\\Map\\\\Map.js\";\nimport React, { useEffect, useState } from \"react\"; //import { GMap } from \"./gmap\";\n\nimport CustomizeMap from \"./customizeMap\";\nimport styles from \"./index.module.less\";\nimport { useDispatch, useMappedState } from \"redux-react-hook\";\nimport { getPlaceResult } from \"../../../../actions/map\";\n\nconst mapStateWidget = state => state.widget;\n\nconst mapStateMap = state => state.map;\n\nconst getMapFeature = featureName => {\n  if (featureName === \"nature\") {\n    return \"beauty_n\";\n  }\n\n  if (featureName === \"architecture\") {\n    return \"beauty_m\";\n  }\n\n  return featureName;\n};\n\nconst getZoom = scope => {\n  switch (scope) {\n    case \"block\":\n      return 20;\n\n    case \"quarterMile\":\n      return 19;\n\n    default:\n    case \"neighborhood\":\n      return 18;\n  }\n};\n\nfunction Map(params) {\n  const featuresStatus = JSON.parse(JSON.stringify(params.featuresStatus)); //convert the address into lng/lat\n\n  const dispatch = useDispatch();\n  const {\n    widgetResult = {\n      address: \"574 Hudson St, New York, NY 10014, USA\"\n    }\n  } = useMappedState(mapStateWidget);\n  const {\n    placeResult\n  } = useMappedState(mapStateMap); // const { address  } = widgetResult;\n\n  const {\n    addressInput = \"\"\n  } = params;\n  const [address, setAddress] = useState();\n  const [features, setFeatures] = useState([]);\n  const [checkedFeature, setCheckedFeature] = useState();\n  const [center, setCenter] = useState({\n    lat: 40.76778789999999,\n    lng: -73.99174099999999\n  });\n\n  const selectIcon = select => {\n    let new_features_info = [...features];\n    new_features_info.map(feature => {\n      if (feature.name === select.name) {\n        feature.isChecked = !feature.isChecked;\n        setCheckedFeature(feature.name.toLowerCase());\n      } else {\n        feature.isChecked = false;\n      }\n    });\n    setFeatures(new_features_info);\n  };\n\n  useEffect(() => {\n    if (address === undefined) return;\n    dispatch(getPlaceResult({\n      query: address,\n      key: \"AIzaSyBOXYeVd2IW4rON6FTyLBesJOG87NE3BJo\"\n    }));\n  }, [dispatch, address]);\n  useEffect(() => {\n    const copyFeatures = featuresStatus.filter(item => item.isChecked);\n    copyFeatures.map(item => item.isChecked = false);\n    setFeatures(copyFeatures);\n\n    if (addressInput !== \"\") {\n      setAddress(addressInput);\n    } else {\n      setAddress(widgetResult.address);\n    }\n  }, []);\n  useEffect(() => {\n    if (placeResult !== undefined) setCenter(placeResult.geometry.location);\n  }, [placeResult]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.map_container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomizeMap, {\n    center: center,\n    zoom: getZoom(params.scope),\n    featureName: getMapFeature(checkedFeature),\n    key: checkedFeature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), Array.isArray(features) && features.length !== 0 && /*#__PURE__*/React.createElement(_Card, {\n    className: styles.panel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Selected Feature\")), /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, features && features.map(item => {\n    return item && /*#__PURE__*/React.createElement(_Col, {\n      key: item.id,\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.featureUnit,\n      onClick: () => selectIcon(item),\n      description: item.description,\n      id: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.avatar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, item.isChecked ?\n    /*#__PURE__*/\n    // <Avatar size={45} src={item.img_new} />\n    React.createElement(_Avatar, {\n      size: 45,\n      src: require(\"../../../../img/widgets/\" + item.name.toLowerCase() + \"-new.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }) :\n    /*#__PURE__*/\n    //<Avatar size={45} src={item.img_faded} />\n    React.createElement(_Avatar, {\n      size: 45,\n      src: require(\"../../../../img/widgets/\" + item.name.toLowerCase() + \"-faded.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }))));\n  }))));\n}\n\nexport default Map;","map":{"version":3,"sources":["F:/Project/walkspanDeploy/src/pages/widgets/WidgetBox/Map/Map.js"],"names":["React","useEffect","useState","CustomizeMap","styles","useDispatch","useMappedState","getPlaceResult","mapStateWidget","state","widget","mapStateMap","map","getMapFeature","featureName","getZoom","scope","Map","params","featuresStatus","JSON","parse","stringify","dispatch","widgetResult","address","placeResult","addressInput","setAddress","features","setFeatures","checkedFeature","setCheckedFeature","center","setCenter","lat","lng","selectIcon","select","new_features_info","feature","name","isChecked","toLowerCase","undefined","query","key","copyFeatures","filter","item","geometry","location","map_container","Array","isArray","length","panel","id","featureUnit","description","avatar","require"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n//import { GMap } from \"./gmap\";\r\nimport CustomizeMap from \"./customizeMap\";\r\nimport styles from \"./index.module.less\";\r\nimport { Card, Col, Avatar, Row } from \"antd\";\r\nimport { useDispatch, useMappedState } from \"redux-react-hook\";\r\nimport { getPlaceResult } from \"../../../../actions/map\";\r\n\r\nconst mapStateWidget = (state) => state.widget;\r\nconst mapStateMap = (state) => state.map;\r\n\r\nconst getMapFeature = (featureName) => {\r\n  if (featureName === \"nature\") {\r\n    return \"beauty_n\";\r\n  }\r\n\r\n  if (featureName === \"architecture\") {\r\n    return \"beauty_m\";\r\n  }\r\n  return featureName;\r\n};\r\n\r\nconst getZoom = (scope) => {\r\n  switch (scope) {\r\n    case \"block\":\r\n      return 20;\r\n\r\n    case \"quarterMile\":\r\n      return 19;\r\n\r\n    default:\r\n    case \"neighborhood\":\r\n      return 18;\r\n  }\r\n};\r\n\r\nfunction Map(params) {\r\n  const featuresStatus = JSON.parse(JSON.stringify(params.featuresStatus));\r\n  //convert the address into lng/lat\r\n  const dispatch = useDispatch();\r\n  const {\r\n    widgetResult = { address: \"574 Hudson St, New York, NY 10014, USA\" },\r\n  } = useMappedState(mapStateWidget);\r\n  const { placeResult } = useMappedState(mapStateMap);\r\n  // const { address  } = widgetResult;\r\n  const { addressInput = \"\" } = params;\r\n  const [address, setAddress] = useState();\r\n  const [features, setFeatures] = useState([]);\r\n  const [checkedFeature, setCheckedFeature] = useState();\r\n  const [center, setCenter] = useState({\r\n    lat: 40.76778789999999,\r\n    lng: -73.99174099999999,\r\n  });\r\n  const selectIcon = (select) => {\r\n    let new_features_info = [...features];\r\n    new_features_info.map((feature) => {\r\n      if (feature.name === select.name) {\r\n        feature.isChecked = !feature.isChecked;\r\n        setCheckedFeature(feature.name.toLowerCase());\r\n      } else {\r\n        feature.isChecked = false;\r\n      }\r\n    });\r\n\r\n    setFeatures(new_features_info);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (address === undefined) return;\r\n    dispatch(\r\n      getPlaceResult({\r\n        query: address,\r\n        key: \"AIzaSyBOXYeVd2IW4rON6FTyLBesJOG87NE3BJo\",\r\n      })\r\n    );\r\n  }, [dispatch, address]);\r\n\r\n  useEffect(() => {\r\n    const copyFeatures = featuresStatus.filter((item) => item.isChecked);\r\n    copyFeatures.map((item) => (item.isChecked = false));\r\n    setFeatures(copyFeatures);\r\n\r\n    if (addressInput !== \"\") {\r\n      setAddress(addressInput);\r\n    } else {\r\n      setAddress(widgetResult.address);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (placeResult !== undefined) setCenter(placeResult.geometry.location);\r\n  }, [placeResult]);\r\n\r\n  return (\r\n    <div className={styles.map_container}>\r\n      <CustomizeMap\r\n        center={center}\r\n        zoom={getZoom(params.scope)}\r\n        featureName={getMapFeature(checkedFeature)}\r\n        key={checkedFeature}\r\n      />\r\n      {Array.isArray(features) && features.length !== 0 && (\r\n        <Card className={styles.panel}>\r\n          <Row>\r\n            <span>Selected Feature</span>\r\n          </Row>\r\n          <Row>\r\n            {features &&\r\n              features.map((item) => {\r\n                return (\r\n                  item && (\r\n                    <Col key={item.id} span={6}>\r\n                      <div\r\n                        className={styles.featureUnit}\r\n                        onClick={() => selectIcon(item)}\r\n                        description={item.description}\r\n                        id={item.id}\r\n                      >\r\n                        <div className={styles.avatar}>\r\n                          {item.isChecked ? (\r\n                            // <Avatar size={45} src={item.img_new} />\r\n                            <Avatar\r\n                              size={45}\r\n                              src={require(\"../../../../img/widgets/\" +\r\n                                item.name.toLowerCase() +\r\n                                \"-new.png\")}\r\n                            />\r\n                          ) : (\r\n                            //<Avatar size={45} src={item.img_faded} />\r\n                            <Avatar\r\n                              size={45}\r\n                              src={require(\"../../../../img/widgets/\" +\r\n                                item.name.toLowerCase() +\r\n                                \"-faded.png\")}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  )\r\n                );\r\n              })}\r\n          </Row>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}