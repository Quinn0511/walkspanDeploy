{"ast":null,"code":"import\"antd/es/badge/style\";import _Badge from\"antd/es/badge\";import\"antd/es/descriptions/style\";import _Descriptions from\"antd/es/descriptions\";import React from\"react\";import styles from\"./WidgetDescription.module.less\";import moment from\"moment\";var WidgetDescription=function WidgetDescription(widgetInfo){console.log(widgetInfo);var widget=widgetInfo.widgetInfo;var features=[];var selectedFeatures=JSON.parse(widget.selected_features);selectedFeatures.map(function(item){if(item.isChecked){features.push(item.name);}});var featuresString=features.join(\", \");return/*#__PURE__*/React.createElement(_Descriptions,{className:styles.description_container,bordered:true,title:widget.widget_name+\" Infomation\"},/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Widget Name\"},widget.widget_name),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Default Address\",span:2},widget.address),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Widget Scope\"},widget.scope),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Creation Time\"},moment(widget.created_at).format(\"YYYY-MM-DD HH:mm\")),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Widget Status\"},/*#__PURE__*/React.createElement(_Badge,{status:\"processing\",text:\"Running\"})),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Selected Features\",span:3},featuresString),/*#__PURE__*/React.createElement(_Descriptions.Item,{label:\"Widget Desscription\"},widget.widget_description,/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null)));};export default WidgetDescription;","map":{"version":3,"sources":["F:/Project/walkspanDeploy/src/pages/admin/component_of_control_panel/WidgetDescription.js"],"names":["React","styles","moment","WidgetDescription","widgetInfo","console","log","widget","features","selectedFeatures","JSON","parse","selected_features","map","item","isChecked","push","name","featuresString","join","description_container","widget_name","address","scope","created_at","format","widget_description"],"mappings":"iJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,iCAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,UAAD,CAAgB,CACxCC,OAAO,CAACC,GAAR,CAAYF,UAAZ,EACA,GAAMG,CAAAA,MAAM,CAAGH,UAAU,CAACA,UAA1B,CACA,GAAII,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAMC,CAAAA,gBAAgB,CAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACK,iBAAlB,CAAzB,CACAH,gBAAgB,CAACI,GAAjB,CAAqB,SAACC,IAAD,CAAU,CAC7B,GAAIA,IAAI,CAACC,SAAT,CAAoB,CAClBP,QAAQ,CAACQ,IAAT,CAAcF,IAAI,CAACG,IAAnB,EACD,CACF,CAJD,EAKA,GAAMC,CAAAA,cAAc,CAAGV,QAAQ,CAACW,IAAT,CAAc,IAAd,CAAvB,CACA,mBACE,mCACE,SAAS,CAAElB,MAAM,CAACmB,qBADpB,CAEE,QAAQ,KAFV,CAGE,KAAK,CAAEb,MAAM,CAACc,WAAP,CAAqB,aAH9B,eAKE,kCAAc,IAAd,EAAmB,KAAK,CAAC,aAAzB,EACGd,MAAM,CAACc,WADV,CALF,cASE,kCAAc,IAAd,EAAmB,KAAK,CAAC,iBAAzB,CAA2C,IAAI,CAAE,CAAjD,EACGd,MAAM,CAACe,OADV,CATF,cAYE,kCAAc,IAAd,EAAmB,KAAK,CAAC,cAAzB,EAAyCf,MAAM,CAACgB,KAAhD,CAZF,cAaE,kCAAc,IAAd,EAAmB,KAAK,CAAC,eAAzB,EACGrB,MAAM,CAACK,MAAM,CAACiB,UAAR,CAAN,CAA0BC,MAA1B,CAAiC,kBAAjC,CADH,CAbF,cAgBE,kCAAc,IAAd,EAAmB,KAAK,CAAC,eAAzB,eACE,4BAAO,MAAM,CAAC,YAAd,CAA2B,IAAI,CAAC,SAAhC,EADF,CAhBF,cAmBE,kCAAc,IAAd,EAAmB,KAAK,CAAC,mBAAzB,CAA6C,IAAI,CAAE,CAAnD,EACGP,cADH,CAnBF,cAsBE,kCAAc,IAAd,EAAmB,KAAK,CAAC,qBAAzB,EACGX,MAAM,CAACmB,kBADV,cAEE,8BAFF,cAGE,8BAHF,cAIE,8BAJF,cAKE,8BALF,cAME,8BANF,cAOE,8BAPF,CAtBF,CADF,CAkCD,CA7CD,CA+CA,cAAevB,CAAAA,iBAAf","sourcesContent":["import React from \"react\";\r\nimport { Descriptions, Badge } from \"antd\";\r\nimport styles from \"./WidgetDescription.module.less\";\r\nimport moment from \"moment\";\r\n\r\nconst WidgetDescription = (widgetInfo) => {\r\n  console.log(widgetInfo);\r\n  const widget = widgetInfo.widgetInfo;\r\n  let features = [];\r\n  const selectedFeatures = JSON.parse(widget.selected_features);\r\n  selectedFeatures.map((item) => {\r\n    if (item.isChecked) {\r\n      features.push(item.name);\r\n    }\r\n  });\r\n  const featuresString = features.join(\", \");\r\n  return (\r\n    <Descriptions\r\n      className={styles.description_container}\r\n      bordered\r\n      title={widget.widget_name + \" Infomation\"}\r\n    >\r\n      <Descriptions.Item label=\"Widget Name\">\r\n        {widget.widget_name}\r\n      </Descriptions.Item>\r\n\r\n      <Descriptions.Item label=\"Default Address\" span={2}>\r\n        {widget.address}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Widget Scope\">{widget.scope}</Descriptions.Item>\r\n      <Descriptions.Item label=\"Creation Time\">\r\n        {moment(widget.created_at).format(\"YYYY-MM-DD HH:mm\")}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Widget Status\">\r\n        <Badge status=\"processing\" text=\"Running\" />\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Selected Features\" span={3}>\r\n        {featuresString}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Widget Desscription\">\r\n        {widget.widget_description}\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n\r\nexport default WidgetDescription;\r\n"]},"metadata":{},"sourceType":"module"}